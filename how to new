

placement new是重载operator new的一个标准、全局的版本，它不能被自定义的版本代替（不像普通的operator new和operator delete能够被替换成用户自定义的版本）。
它的原型如下：
void *operator new( size_t, void *p ) throw()  { return p; }
 
首先我们区分下几个容易混淆的关键词：new、operator new、placement new
new和delete操作符我们应该都用过，它们是对堆中的内存进行申请和释放，而这两个都是不能被重载的。要实现不同的内存分配行为，需要重载operator new，而不是new和delete。
 
看如下代码：
class MyClass {…};
MyClass * p=new MyClass;
这里的new实际上是执行如下3个过程：
1调用operator new分配内存；
2调用构造函数生成类对象；
3返回相应指针。
operator new就像operator+一样，是可以重载的，但是不能在全局对原型为void operator new(size_t size)这个原型进行重载，一般只能在类中进行重载。如果类中没有重载operator new，那么调用的就是全局的::operator new来完成堆的分配。同理，operator new[]、operator delete、operator delete[]也是可以重载的，一般你重载了其中一个，那么最好把其余三个都重载一遍。
placement new是operator new的一个重载版本，只是我们很少用到它。如果你想在已经分配的内存中创建一个对象，使用new是不行的。也就是说placement new允许你在一个已经分配好的内存中（栈或堆中）构造一个新的对象。原型中void*p实际上就是指向一个已经分配好的内存缓冲区的的首地址。
我们知道使用new操作符分配内存需要在堆中查找足够大的剩余空间，这个操作速度是很慢的，而且有可能出现无法分配内存的异常（空间不够）。placement new就可以解决这个问题。我们构造对象都是在一个预先准备好了的内存缓冲区中进行，不需要查找内存，内存分配的时间是常数；而且不会出现在程序运行中途出现内存不足的异常。所以，placement new非常适合那些对时间要求比较高，长时间运行不希望被打断的应用程序。
 
使用方法如下：
1. 缓冲区提前分配
可以使用堆的空间，也可以使用栈的空间，所以分配方式有如下两种：
class MyClass {…}; 
char *buf=new char[N*sizeof(MyClass)+ sizeof(int) ] ; 或者char buf[N*sizeof(MyClass)+ sizeof(int) ];
2. 对象的构造
MyClass * pClass=new(buf) MyClass;
3. 对象的销毁
一旦这个对象使用完毕，你必须显式的调用类的析构函数进行销毁对象。但此时内存空间不会被释放，以便其他的对象的构造。
pClass->~MyClass();
4. 内存的释放
如果缓冲区在堆中，那么调用delete[] buf;进行内存的释放；如果在栈中，那么在其作用域内有效，跳出作用域，内存自动释放。
 
注意：
1)        在C++标准中，对于placement operator new []有如下的说明： placement operator new[] needs implementation-defined amount of additional storage to save a size of array. 所以我们必须申请比原始对象大小多出sizeof(int)个字节来存放对象的个数，或者说数组的大小。
2)        使用方法第二步中的new才是placement new，其实是没有申请内存的，只是调用了构造函数，返回一个指向已经分配好的内存的一个指针，所以对象销毁的时候不需要调用delete释放空间，但必须调用析构函数销毁对象。
-----------------------------------------------------------------------------------------------------------------
显式调用构造函数和析构函数
今天跟同事聊天，他说到STL源码有用到显示调用析构函数。试一了一下。果然能行。
 
 
结果：
Constructors
Destructors        //这个是显示调用的析构函数
Destructors        // 这个是delete调用的析构函数
 
这有什么用？ 
有时候，在对象的生命周期结束前，想先结束这个对象的时候就会派上用场了。
 
由此想到的： 
因为我知道。
new的时候，其实做了两件事，一是：调用malloc分配所需内存，二是：调用构造函数。
delete的时候，也是做了两件事，一是：调用析造函数，二是：调用free释放内存。

 书上说：new表达式含两个阶段的操作：1.调用 ::operator new 配置内存 2.调用构造函数
delete表达式含有两个阶段的操作：1.调用析构函数，2.调用::operator delete释放内存
所以推测构造函数也是可以显式调用的。做了个实现。
 

int _tmain(int argc, _TCHAR* argv[])
{
MyClass* pMyClass = (MyClass*)malloc(sizeof(MyClass));
pMyClass->MyClass();
 // …
}
 
 
编译pMyClass->MyClass()出错：
error C2273: 'function-style cast' : illegal as right side of '->'operator
天啊，它以为MyClass是这个类型。
 
解决办法有两个：
 

第一：pMyClass->MyClass::MyClass();
第二：new(pMyClass)MyClass();
 
 
第二种用法涉及C++ placement new 的用法 。
placement new的作用就是：创建对象(调用该类的构造函数)但是不分配内存，而是在已有的内存块上面创建对象。用于需要反复创建并删除的对象上，可以降低分配释放内存的性能消耗。请查阅placement new相关资料。

显示调用构造函数有什么用？ 
有时候，你可能由于效率考虑要用到malloc去给类对象分配内存，因为malloc是不调用构造函数的，所以这个时候会派上用场了。
 
另外下面也是可以的，虽然内置类型没有构造函数。
 

int* i = (int*)malloc(sizeof(int));
new (i) int();
 
感觉这些奇奇怪怪的用法最好在写代码库时，为了达到某个目时去使用，不推荐应用开发时使用。
#include <iostream>
using namespace std;

class MyClass
{
public:
MyClass()
{
cout << "Constructors" << endl;
}
 ~MyClass()
{
cout << "Destructors" << endl;
}

};

int _tmain(int argc, _TCHAR* argv[])
{
MyClass* pMyClass = new MyClass;
pMyClass->~MyClass();
delete pMyClass;

}
